from flask import Flask, render_template, request, redirect, url_for, flash, session
from datetime import datetime
import re
import bcrypt
import sqlite3

app = Flask(__name__)
app.secret_key = 'godislove'

# Função para conectar ao banco de dados
def get_db_connection():
    conn = sqlite3.connect('Sistema.db')
    conn.row_factory = sqlite3.Row
    return conn

@app.route('/')
def index():
    return render_template('login.html')

@app.route('/login', methods=['GET', 'POST'])
def login():
    if request.method == 'POST':
        email = request.form['email']
        password = request.form['password']

        if not email or not password:
            flash('Por favor, preencha ambos os campos.')
            return redirect(url_for('login'))

        conn = get_db_connection()
        user = conn.execute('SELECT * FROM users WHERE email = ?', (email,)).fetchone()
        conn.close()

        if user and bcrypt.checkpw(password.encode('utf-8'), user['password'].encode('utf-8')):
            session['user_id'] = user['id']
            return redirect(url_for('ordem_servico'))
        else:
            flash('E-mail ou senha incorretos.')
            return redirect(url_for('login'))

    return render_template('login.html')

@app.route('/register', methods=['GET', 'POST'])
def register():
    if request.method == 'POST':
        username = request.form['username']
        email = request.form['email']
        password = request.form['password']
        conf_password = request.form['conf_password']

        if not username or not email or not password or not conf_password:
            flash('Todos os campos são obrigatórios.')
            return redirect(url_for('register'))

        if password != conf_password:
            flash('As senhas não coincidem.')
            return redirect(url_for('register'))

        if not re.match(r"[^@]+@[^@]+\.[^@]+", email):
            flash('Formato de e-mail inválido.')
            return redirect(url_for('register'))

        hashed_password = bcrypt.hashpw(password.encode('utf-8'), bcrypt.gensalt())

        conn = get_db_connection()
        try:
            conn.execute('INSERT INTO users (username, email, password) VALUES (?, ?, ?)',
                         (username, email, hashed_password))
            conn.commit()
            flash('Usuário cadastrado com sucesso.')
            return redirect(url_for('login'))
        except sqlite3.IntegrityError:
            flash('E-mail já cadastrado.')
        finally:
            conn.close()

    return render_template('register.html')

@app.route('/ordem_servico', methods=['GET', 'POST'])
def ordem_servico():
    if 'user_id' not in session:
        return redirect(url_for('login'))

        if not email or not password:
            flash('Por favor, preencha ambos os campos.')
        return redirect(url_for('login'))

    conn = get_db_connection()
    user = conn.execute('SELECT * FROM users WHERE email = ?', (email,)).fetchone()
    conn.close()

    if user and bcrypt.checkpw(password.encode('utf-8'), user['password'].encode('utf-8')):
        session['user_id'] = user['id']
        return redirect(url_for('ordem_servico'))
    else:
        flash('E-mail ou senha incorretos.')
        return redirect(url_for('login'))

    return render_template('login.html')

    if not username or not email or not password or not conf_password:
        flash('Todos os campos são obrigatórios.')
        return redirect(url_for('register'))

    if password != conf_password:
        flash('As senhas não coincidem.')
        return redirect(url_for('register'))

    if not re.match(r"[^@]+@[^@]+\.[^@]+", email):
        flash('Formato de e-mail inválido.')
        return redirect(url_for('register'))

    hashed_password = bcrypt.hashpw(password.encode('utf-8'), bcrypt.gensalt())

    conn = get_db_connection()
    try:
        conn.execute('INSERT INTO users (username, email, password) VALUES (?, ?, ?)',
                     (username, email, hashed_password))
        conn.commit()
        flash('Usuário cadastrado com sucesso.')
        return redirect(url_for('login'))
    except sqlite3.IntegrityError:
        flash('E-mail já cadastrado.')
    finally:
        conn.close()

    return render_template('register.html')

    if request.method == 'POST':
        descricao = request.form['descricao']
        data_criacao = datetime.now()

        if not descricao:
            flash('A descrição é obrigatória.')
            return redirect(url_for('ordem_servico'))

        conn = get_db_connection()
        conn.execute('INSERT INTO ordens_servico (user_id, descricao, data_criacao) VALUES (?, ?, ?)',
                     (session['user_id'], descricao, data_criacao))
        conn.commit()
        conn.close()
        flash('Ordem de serviço criada com sucesso.')
        return redirect(url_for('ordem_servico'))

    conn = get_db_connection()
    ordens = conn.execute('SELECT * FROM ordens_servico WHERE user_id = ?', (session['user_id'],)).fetchall()
    conn.close()

    return render_template('ordem_servico.html', ordens=ordens)

@app.route('/logout')
def logout():
    session.pop('user_id', None)
    flash('Você saiu com sucesso.')
    return redirect(url_for('login'))

if __name__ == '__main__':
    app.run(debug=True)
