import customtkinter as ctk
from tkinter import *
from tkinter import messagebox
from PIL import Image, ImageTk
import sqlite3

janela = ctk.CTk()

class Application():
    def __init__(self):
        self.janela = janela
        self.tema()
        self.tela()
        self.janela_login()
        janela.mainloop()
        
    def tema(self):
        ctk.set_appearance_mode("dark")
        ctk.set_default_color_theme("dark-blue")

    def tela(self):    
        janela.geometry("700x400")  # tamanho da janela 
        janela.title("Teela - Manutenção Hoteleira") 
        janela.resizable(False, False)  # Impede que o tamanho da janela seja ajustado
        
    def janela_login(self):
        # Trabalhando com a logomarca
        img = Image.open("logo1.png")
        altura_desejada = 337
        largura_original, altura_original = img.size
        proporcao = largura_original / altura_original
        nova_largura = int(altura_desejada * proporcao)
        img = img.resize((nova_largura, altura_desejada), Image.LANCZOS)

        # Converter a imagem para um formato que o customtkinter pode usar
        img_tk = ImageTk.PhotoImage(img)

        # Adicionar a imagem ao label
        label_img = ctk.CTkLabel(master=janela, image=img_tk, text=None, fg_color="black")  
        label_img.image = img_tk  # Manter uma referência da imagem
        label_img.place(x=5, y=50)

        # Título do Sistema
        lb_title = ctk.CTkLabel(master=janela, text="Teela", 
                                font=("Century Gothic bold", 25), text_color="#00B0F0").place(x=150, y=10)

        # Frame 
        login_frame = ctk.CTkFrame(master=janela, width=350, height=396)
        login_frame.pack(side=RIGHT)

        # Frame Widgets
        label_tt = ctk.CTkLabel(master=login_frame, text="Faça seu Login", font=("Century Gothic bold", 20)).place(x=100, y=10)

        # Entradas
        self.username_entry = ctk.CTkEntry(master=login_frame, placeholder_text= "Nome do Usuário", width=300, 
                                      font=("Century Gothic bold", 14))
        self.username_entry.place(x=25, y=80)

        username_label = ctk.CTkLabel(master=login_frame, text="*O campo nome do usuário é de caráter obrigatório.", text_color="white", 
                                    font=("Century Gothic bold", 10)).place(x=25, y=110)

        self.password_entry = ctk.CTkEntry(master=login_frame, placeholder_text="Senha do Usuário", show="*", width=300, 
                                    font=("Century Gothic bold", 14))
        self.password_entry.place(x=25, y=160)
                
        password_label = ctk.CTkLabel(master=login_frame, text="*O campo senha de usuário é de caráter obrigatório.", text_color="white", 
                                    font=("Century Gothic bold", 10)).place(x=25, y=190)

        checkbox = ctk.CTkCheckBox(master=login_frame, text= "Mantenha-me conectado").place(x=25, y=230)

        login_Button = ctk.CTkButton(master=login_frame, text= "Entrar", width=300, command=self.login).place(x=25, y=280)

        register_label = ctk.CTkLabel(master=login_frame, text= "Não possue conta?").place(x=25, y=320)
        
        register_button = ctk.CTkButton(master=login_frame, text= "Cadastre-se", width=150, 
                                        fg_color="green", hover_color="#2D9334",command=self.tela_register).place(x=175, y=320)

    def login(self):
        username = self.username_entry.get()
        password = self.password_entry.get()

        # Verificar se o usuário existe no banco de dados
        conexao = sqlite3.connect("Sistema.db")
        cursor = conexao.cursor()
        cursor.execute("SELECT * FROM users WHERE Username=? AND Password=?", (username, password))
        user = cursor.fetchone()
        conexao.close()

        if user:
            # Se o usuário existe, abrir a tela de Ordem de Serviço
            self.janela.destroy()  # Fecha a janela de login
            OrdemDeServico()  # Abre a nova tela
        else:
            messagebox.showerror("Erro", "Nome de usuário ou senha incorretos.")

    def tela_register(self):
        # Remover o frame de login
        login_frame = self.janela.children.get('!ctkframe')  # Obtem o frame de login
        login_frame.pack_forget()
        
        # Criando a tela de cadastro de usuários
        rg_frame = ctk.CTkFrame(master=janela, width=350, height=396)
        rg_frame.pack(side=RIGHT)
        
        label_tt = ctk.CTkLabel(master=rg_frame, text="Cadastro de Usuário", font=("Century Gothic bold", 20)).place(x=100, y=10)
        
        span = ctk.CTkLabel(master=rg_frame, text="*Preencha todos os campos com dados corretos", font=("Century Gothic bold", 11)).place(x=25, y=50)
        
        self.register_username_entry = ctk.CTkEntry(master=rg_frame, placeholder_text= "Nome do Usuário", width=300, 
                                      font=("Century Gothic bold", 14))
        self.register_username_entry.place(x=25, y=85)
        
        self.register_email_entry = ctk.CTkEntry(master=rg_frame, placeholder_text="E-mail do Usuário", width=300, 
                                    font=("Century Gothic bold", 14))
        self.register_email_entry.place(x=25, y=125)
        
        self.register_password_entry = ctk.CTkEntry(master=rg_frame, placeholder_text="Senha do Usuário", show="*", width=300, 
                                    font=("Century Gothic bold", 14))
        self.register_password_entry.place(x=25, y=165)
        
        self.register_confirme_entry = ctk.CTkEntry(master=rg_frame, placeholder_text="Confirme sua senha", show= "*", width=300, 
                                    font=("Century Gothic bold", 14))
        self.register_confirme_entry.place(x=25, y=205)

        back_Button = ctk.CTkButton(master=rg_frame, text= "Voltar", width=140, fg_color="gray", command=lambda: self.back(rg_frame, login_frame)).place(x=25, y=285)
       
        save_Button = ctk.CTkButton(master=rg_frame, text= "Salvar", width=140, command=self.save_user).place(x=185, y=285)
            
        checkbox = ctk.CTkCheckBox(master=rg_frame, text= "Aceito todos os Termos e Política", 
                                   font=("Century Gothic bold", 10)).place(x=25, y=350)

    def back(self, rg_frame, login_frame):
        # Remover o frame de Cadastro
        rg_frame.pack_forget()
        # Devolvendo o frame de login
        login_frame.pack(side=RIGHT)

    def save_user(self):
        username = self.register_username_entry.get()
        email = self.register_email_entry.get()
        password = self.register_password_entry.get()
        conf_password = self.register_confirme_entry.get()

        if password != conf_password:
            messagebox.showerror("Erro", "As senhas não coincidem.")
            return
        
        # Conectar ao banco de dados e inserir os dados
        conexao = sqlite3.connect("Sistema.db")
        cursor = conexao.cursor()
        
        # Inserir dados na tabela
        cursor.execute("INSERT INTO users (Username, Email, Password, ConfPassword) VALUES (?, ?, ?, ?)", 
                       (username, email, password, conf_password))
        
        conexao.commit()  # Confirma as alterações
        conexao.close()   # Fecha a conexão
        
        messagebox.showinfo(title="Estado do Cadastro", message="Parabéns! Usuário cadastrado com sucesso.")

class OrdemDeServico:
    def __init__(self):
        self.janela_os = ctk.CTk()
        self.janela_os.geometry("700x400")
        self.janela_os.title("Ordem de Serviço")

        # Aqui você pode adicionar widgets para a tela de Ordem de Serviço
        label_os = ctk.CTkLabel(master=self.janela_os, text="Bem-vindo à Ordem de Serviço", font=("Century Gothic bold", 20))
        label_os.pack(pady=20)

        self.janela_os.mainloop()

# Cria uma tabela caso não exista
conexao = sqlite3.connect("Sistema.db")  # Variável
cursor = conexao.cursor()  # Objeto
cursor.execute("""
CREATE TABLE IF NOT EXISTS users(
    Id INTEGER NOT NULL PRIMARY KEY AUTOINCREMENT,
    Username TEXT NOT NULL,
    Email TEXT NOT NULL,
    Password TEXT NOT NULL,
    ConfPassword TEXT NOT NULL
)""")
conexao.commit()  # Confirma as alterações
conexao.close()   # Fecha a conexão

Application()
